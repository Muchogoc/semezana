// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChannelID holds the string denoting the channel_id field in the database.
	FieldChannelID = "channel_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSequence holds the string denoting the sequence field in the database.
	FieldSequence = "sequence"
	// FieldHeader holds the string denoting the header field in the database.
	FieldHeader = "header"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeChannel holds the string denoting the channel edge name in mutations.
	EdgeChannel = "channel"
	// EdgeMessageRecipients holds the string denoting the message_recipients edge name in mutations.
	EdgeMessageRecipients = "message_recipients"
	// EdgeRecipients holds the string denoting the recipients edge name in mutations.
	EdgeRecipients = "recipients"
	// Table holds the table name of the message in the database.
	Table = "messages"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "messages"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "user_messages"
	// ChannelTable is the table that holds the channel relation/edge.
	ChannelTable = "messages"
	// ChannelInverseTable is the table name for the Channel entity.
	// It exists in this package in order to avoid circular dependency with the "channel" package.
	ChannelInverseTable = "channels"
	// ChannelColumn is the table column denoting the channel relation/edge.
	ChannelColumn = "channel_id"
	// MessageRecipientsTable is the table that holds the message_recipients relation/edge. The primary key declared below.
	MessageRecipientsTable = "recipients"
	// MessageRecipientsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	MessageRecipientsInverseTable = "users"
	// RecipientsTable is the table that holds the recipients relation/edge.
	RecipientsTable = "recipients"
	// RecipientsInverseTable is the table name for the Recipient entity.
	// It exists in this package in order to avoid circular dependency with the "recipient" package.
	RecipientsInverseTable = "recipients"
	// RecipientsColumn is the table column denoting the recipients relation/edge.
	RecipientsColumn = "message_id"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldChannelID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldSequence,
	FieldHeader,
	FieldContent,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "messages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_messages",
}

var (
	// MessageRecipientsPrimaryKey and MessageRecipientsColumn2 are the table columns denoting the
	// primary key for the message_recipients relation (M2M).
	MessageRecipientsPrimaryKey = []string{"user_id", "message_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
