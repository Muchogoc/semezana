// Code generated by ent, DO NOT EDIT.

package recipient

import (
	"fmt"
)

const (
	// Label holds the string label denoting the recipient type in the database.
	Label = "recipient"
	// FieldMessageID holds the string denoting the message_id field in the database.
	FieldMessageID = "message_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStatusAt holds the string denoting the status_at field in the database.
	FieldStatusAt = "status_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeMessage holds the string denoting the message edge name in mutations.
	EdgeMessage = "message"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// MessageFieldID holds the string denoting the ID field of the Message.
	MessageFieldID = "id"
	// Table holds the table name of the recipient in the database.
	Table = "recipients"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "recipients"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// MessageTable is the table that holds the message relation/edge.
	MessageTable = "recipients"
	// MessageInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessageInverseTable = "messages"
	// MessageColumn is the table column denoting the message relation/edge.
	MessageColumn = "message_id"
)

// Columns holds all SQL columns for recipient fields.
var Columns = []string{
	FieldMessageID,
	FieldUserID,
	FieldStatus,
	FieldStatusAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusDELIVERED Status = "DELIVERED"
	StatusUNREAD    Status = "UNREAD"
	StatusREAD      Status = "READ"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDELIVERED, StatusUNREAD, StatusREAD:
		return nil
	default:
		return fmt.Errorf("recipient: invalid enum value for status field: %q", s)
	}
}
