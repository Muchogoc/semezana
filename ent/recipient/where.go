// Code generated by ent, DO NOT EDIT.

package recipient

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Muchogoc/semezana/ent/predicate"
	"github.com/google/uuid"
)

// MessageID applies equality check predicate on the "message_id" field. It's identical to MessageIDEQ.
func MessageID(v uuid.UUID) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessageID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// StatusAt applies equality check predicate on the "status_at" field. It's identical to StatusAtEQ.
func StatusAt(v time.Time) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusAt), v))
	})
}

// MessageIDEQ applies the EQ predicate on the "message_id" field.
func MessageIDEQ(v uuid.UUID) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessageID), v))
	})
}

// MessageIDNEQ applies the NEQ predicate on the "message_id" field.
func MessageIDNEQ(v uuid.UUID) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMessageID), v))
	})
}

// MessageIDIn applies the In predicate on the "message_id" field.
func MessageIDIn(vs ...uuid.UUID) predicate.Recipient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMessageID), v...))
	})
}

// MessageIDNotIn applies the NotIn predicate on the "message_id" field.
func MessageIDNotIn(vs ...uuid.UUID) predicate.Recipient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMessageID), v...))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Recipient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Recipient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Recipient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Recipient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusAtEQ applies the EQ predicate on the "status_at" field.
func StatusAtEQ(v time.Time) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusAt), v))
	})
}

// StatusAtNEQ applies the NEQ predicate on the "status_at" field.
func StatusAtNEQ(v time.Time) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusAt), v))
	})
}

// StatusAtIn applies the In predicate on the "status_at" field.
func StatusAtIn(vs ...time.Time) predicate.Recipient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatusAt), v...))
	})
}

// StatusAtNotIn applies the NotIn predicate on the "status_at" field.
func StatusAtNotIn(vs ...time.Time) predicate.Recipient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatusAt), v...))
	})
}

// StatusAtGT applies the GT predicate on the "status_at" field.
func StatusAtGT(v time.Time) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusAt), v))
	})
}

// StatusAtGTE applies the GTE predicate on the "status_at" field.
func StatusAtGTE(v time.Time) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusAt), v))
	})
}

// StatusAtLT applies the LT predicate on the "status_at" field.
func StatusAtLT(v time.Time) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusAt), v))
	})
}

// StatusAtLTE applies the LTE predicate on the "status_at" field.
func StatusAtLTE(v time.Time) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusAt), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.To(UserInverseTable, UserFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.To(UserInverseTable, UserFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessage applies the HasEdge predicate on the "message" edge.
func HasMessage() predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, MessageColumn),
			sqlgraph.To(MessageInverseTable, MessageFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MessageTable, MessageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessageWith applies the HasEdge predicate on the "message" edge with a given conditions (other predicates).
func HasMessageWith(preds ...predicate.Message) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, MessageColumn),
			sqlgraph.To(MessageInverseTable, MessageFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MessageTable, MessageColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Recipient) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Recipient) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Recipient) predicate.Recipient {
	return predicate.Recipient(func(s *sql.Selector) {
		p(s.Not())
	})
}
