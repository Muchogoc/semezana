// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldStateAt holds the string denoting the state_at field in the database.
	FieldStateAt = "state_at"
	// FieldLastSeen holds the string denoting the last_seen field in the database.
	FieldLastSeen = "last_seen"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// EdgeRecipientMessages holds the string denoting the recipient_messages edge name in mutations.
	EdgeRecipientMessages = "recipient_messages"
	// EdgeDevices holds the string denoting the devices edge name in mutations.
	EdgeDevices = "devices"
	// EdgeChannels holds the string denoting the channels edge name in mutations.
	EdgeChannels = "channels"
	// EdgeRecipients holds the string denoting the recipients edge name in mutations.
	EdgeRecipients = "recipients"
	// EdgeSubscriptions holds the string denoting the subscriptions edge name in mutations.
	EdgeSubscriptions = "subscriptions"
	// Table holds the table name of the user in the database.
	Table = "users"
	// MessagesTable is the table that holds the messages relation/edge.
	MessagesTable = "messages"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "messages"
	// MessagesColumn is the table column denoting the messages relation/edge.
	MessagesColumn = "user_messages"
	// RecipientMessagesTable is the table that holds the recipient_messages relation/edge. The primary key declared below.
	RecipientMessagesTable = "recipients"
	// RecipientMessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	RecipientMessagesInverseTable = "messages"
	// DevicesTable is the table that holds the devices relation/edge.
	DevicesTable = "devices"
	// DevicesInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DevicesInverseTable = "devices"
	// DevicesColumn is the table column denoting the devices relation/edge.
	DevicesColumn = "user_devices"
	// ChannelsTable is the table that holds the channels relation/edge. The primary key declared below.
	ChannelsTable = "subscriptions"
	// ChannelsInverseTable is the table name for the Channel entity.
	// It exists in this package in order to avoid circular dependency with the "channel" package.
	ChannelsInverseTable = "channels"
	// RecipientsTable is the table that holds the recipients relation/edge.
	RecipientsTable = "recipients"
	// RecipientsInverseTable is the table name for the Recipient entity.
	// It exists in this package in order to avoid circular dependency with the "recipient" package.
	RecipientsInverseTable = "recipients"
	// RecipientsColumn is the table column denoting the recipients relation/edge.
	RecipientsColumn = "user_id"
	// SubscriptionsTable is the table that holds the subscriptions relation/edge.
	SubscriptionsTable = "subscriptions"
	// SubscriptionsInverseTable is the table name for the Subscription entity.
	// It exists in this package in order to avoid circular dependency with the "subscription" package.
	SubscriptionsInverseTable = "subscriptions"
	// SubscriptionsColumn is the table column denoting the subscriptions relation/edge.
	SubscriptionsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldState,
	FieldStateAt,
	FieldLastSeen,
}

var (
	// RecipientMessagesPrimaryKey and RecipientMessagesColumn2 are the table columns denoting the
	// primary key for the recipient_messages relation (M2M).
	RecipientMessagesPrimaryKey = []string{"user_id", "message_id"}
	// ChannelsPrimaryKey and ChannelsColumn2 are the table columns denoting the
	// primary key for the channels relation (M2M).
	ChannelsPrimaryKey = []string{"user_id", "channel_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
