// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Muchogoc/semezana/ent/user"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// StateAt holds the value of the "state_at" field.
	StateAt time.Time `json:"state_at,omitempty"`
	// LastSeen holds the value of the "last_seen" field.
	LastSeen time.Time `json:"last_seen,omitempty"`
	// Access holds the value of the "access" field.
	Access map[string]interface{} `json:"access,omitempty"`
	// Public holds the value of the "public" field.
	Public map[string]interface{} `json:"public,omitempty"`
	// Trusted holds the value of the "trusted" field.
	Trusted map[string]interface{} `json:"trusted,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags map[string]interface{} `json:"tags,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Subscriptions holds the value of the subscriptions edge.
	Subscriptions []*Subscription `json:"subscriptions,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// Topics holds the value of the topics edge.
	Topics []*Topic `json:"topics,omitempty"`
	// Devices holds the value of the devices edge.
	Devices []*Device `json:"devices,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SubscriptionsOrErr() ([]*Subscription, error) {
	if e.loadedTypes[0] {
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[1] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// TopicsOrErr returns the Topics value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TopicsOrErr() ([]*Topic, error) {
	if e.loadedTypes[2] {
		return e.Topics, nil
	}
	return nil, &NotLoadedError{edge: "topics"}
}

// DevicesOrErr returns the Devices value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DevicesOrErr() ([]*Device, error) {
	if e.loadedTypes[3] {
		return e.Devices, nil
	}
	return nil, &NotLoadedError{edge: "devices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldAccess, user.FieldPublic, user.FieldTrusted, user.FieldTags:
			values[i] = new([]byte)
		case user.FieldState:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldStateAt, user.FieldLastSeen:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				u.State = value.String
			}
		case user.FieldStateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field state_at", values[i])
			} else if value.Valid {
				u.StateAt = value.Time
			}
		case user.FieldLastSeen:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_seen", values[i])
			} else if value.Valid {
				u.LastSeen = value.Time
			}
		case user.FieldAccess:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field access", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.Access); err != nil {
					return fmt.Errorf("unmarshal field access: %w", err)
				}
			}
		case user.FieldPublic:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field public", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.Public); err != nil {
					return fmt.Errorf("unmarshal field public: %w", err)
				}
			}
		case user.FieldTrusted:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field trusted", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.Trusted); err != nil {
					return fmt.Errorf("unmarshal field trusted: %w", err)
				}
			}
		case user.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		}
	}
	return nil
}

// QuerySubscriptions queries the "subscriptions" edge of the User entity.
func (u *User) QuerySubscriptions() *SubscriptionQuery {
	return (&UserClient{config: u.config}).QuerySubscriptions(u)
}

// QueryMessages queries the "messages" edge of the User entity.
func (u *User) QueryMessages() *MessageQuery {
	return (&UserClient{config: u.config}).QueryMessages(u)
}

// QueryTopics queries the "topics" edge of the User entity.
func (u *User) QueryTopics() *TopicQuery {
	return (&UserClient{config: u.config}).QueryTopics(u)
}

// QueryDevices queries the "devices" edge of the User entity.
func (u *User) QueryDevices() *DeviceQuery {
	return (&UserClient{config: u.config}).QueryDevices(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(u.State)
	builder.WriteString(", ")
	builder.WriteString("state_at=")
	builder.WriteString(u.StateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_seen=")
	builder.WriteString(u.LastSeen.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("access=")
	builder.WriteString(fmt.Sprintf("%v", u.Access))
	builder.WriteString(", ")
	builder.WriteString("public=")
	builder.WriteString(fmt.Sprintf("%v", u.Public))
	builder.WriteString(", ")
	builder.WriteString("trusted=")
	builder.WriteString(fmt.Sprintf("%v", u.Trusted))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", u.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
