// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Muchogoc/semezana/ent/channel"
	"github.com/Muchogoc/semezana/ent/message"
	"github.com/Muchogoc/semezana/ent/schema"
	"github.com/Muchogoc/semezana/ent/user"
	"github.com/google/uuid"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID uuid.UUID `json:"channel_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Sequence holds the value of the "sequence" field.
	Sequence int `json:"sequence,omitempty"`
	// The message header
	Header schema.MessageHeaders `json:"header,omitempty"`
	// The message data
	Content schema.MessageContent `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges         MessageEdges `json:"edges"`
	user_messages *uuid.UUID
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// Channel holds the value of the channel edge.
	Channel *Channel `json:"channel,omitempty"`
	// MessageRecipients holds the value of the message_recipients edge.
	MessageRecipients []*User `json:"message_recipients,omitempty"`
	// Recipients holds the value of the recipients edge.
	Recipients []*Recipient `json:"recipients,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) AuthorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// ChannelOrErr returns the Channel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) ChannelOrErr() (*Channel, error) {
	if e.loadedTypes[1] {
		if e.Channel == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: channel.Label}
		}
		return e.Channel, nil
	}
	return nil, &NotLoadedError{edge: "channel"}
}

// MessageRecipientsOrErr returns the MessageRecipients value or an error if the edge
// was not loaded in eager-loading.
func (e MessageEdges) MessageRecipientsOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.MessageRecipients, nil
	}
	return nil, &NotLoadedError{edge: "message_recipients"}
}

// RecipientsOrErr returns the Recipients value or an error if the edge
// was not loaded in eager-loading.
func (e MessageEdges) RecipientsOrErr() ([]*Recipient, error) {
	if e.loadedTypes[3] {
		return e.Recipients, nil
	}
	return nil, &NotLoadedError{edge: "recipients"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldHeader, message.FieldContent:
			values[i] = new([]byte)
		case message.FieldSequence:
			values[i] = new(sql.NullInt64)
		case message.FieldCreatedAt, message.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case message.FieldID, message.FieldChannelID:
			values[i] = new(uuid.UUID)
		case message.ForeignKeys[0]: // user_messages
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Message", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case message.FieldChannelID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value != nil {
				m.ChannelID = *value
			}
		case message.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case message.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case message.FieldSequence:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence", values[i])
			} else if value.Valid {
				m.Sequence = int(value.Int64)
			}
		case message.FieldHeader:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field header", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Header); err != nil {
					return fmt.Errorf("unmarshal field header: %w", err)
				}
			}
		case message.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Content); err != nil {
					return fmt.Errorf("unmarshal field content: %w", err)
				}
			}
		case message.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_messages", values[i])
			} else if value.Valid {
				m.user_messages = new(uuid.UUID)
				*m.user_messages = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryAuthor queries the "author" edge of the Message entity.
func (m *Message) QueryAuthor() *UserQuery {
	return (&MessageClient{config: m.config}).QueryAuthor(m)
}

// QueryChannel queries the "channel" edge of the Message entity.
func (m *Message) QueryChannel() *ChannelQuery {
	return (&MessageClient{config: m.config}).QueryChannel(m)
}

// QueryMessageRecipients queries the "message_recipients" edge of the Message entity.
func (m *Message) QueryMessageRecipients() *UserQuery {
	return (&MessageClient{config: m.config}).QueryMessageRecipients(m)
}

// QueryRecipients queries the "recipients" edge of the Message entity.
func (m *Message) QueryRecipients() *RecipientQuery {
	return (&MessageClient{config: m.config}).QueryRecipients(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return (&MessageClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", m.ChannelID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sequence=")
	builder.WriteString(fmt.Sprintf("%v", m.Sequence))
	builder.WriteString(", ")
	builder.WriteString("header=")
	builder.WriteString(fmt.Sprintf("%v", m.Header))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", m.Content))
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message

func (m Messages) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
