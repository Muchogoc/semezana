// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DevicesColumns holds the columns for the "devices" table.
	DevicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "hash", Type: field.TypeString},
		{Name: "device_id", Type: field.TypeString},
		{Name: "platform", Type: field.TypeString},
		{Name: "last_seen", Type: field.TypeTime},
		{Name: "language", Type: field.TypeString},
		{Name: "user_devices", Type: field.TypeUUID},
	}
	// DevicesTable holds the schema information for the "devices" table.
	DevicesTable = &schema.Table{
		Name:       "devices",
		Columns:    DevicesColumns,
		PrimaryKey: []*schema.Column{DevicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "devices_users_devices",
				Columns:    []*schema.Column{DevicesColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "device_hash",
				Unique:  true,
				Columns: []*schema.Column{DevicesColumns[3]},
			},
		},
	}
	// MessagesColumns holds the columns for the "messages" table.
	MessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "sequence", Type: field.TypeInt},
		{Name: "content", Type: field.TypeJSON},
		{Name: "header", Type: field.TypeJSON},
		{Name: "topic_id", Type: field.TypeUUID},
		{Name: "user_messages", Type: field.TypeUUID, Nullable: true},
	}
	// MessagesTable holds the schema information for the "messages" table.
	MessagesTable = &schema.Table{
		Name:       "messages",
		Columns:    MessagesColumns,
		PrimaryKey: []*schema.Column{MessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "messages_topics_messages",
				Columns:    []*schema.Column{MessagesColumns[6]},
				RefColumns: []*schema.Column{TopicsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "messages_users_messages",
				Columns:    []*schema.Column{MessagesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "message_topic_id_sequence",
				Unique:  true,
				Columns: []*schema.Column{MessagesColumns[6], MessagesColumns[3]},
			},
		},
	}
	// SubscriptionsColumns holds the columns for the "subscriptions" table.
	SubscriptionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "topic_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// SubscriptionsTable holds the schema information for the "subscriptions" table.
	SubscriptionsTable = &schema.Table{
		Name:       "subscriptions",
		Columns:    SubscriptionsColumns,
		PrimaryKey: []*schema.Column{SubscriptionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subscriptions_topics_subscriptions",
				Columns:    []*schema.Column{SubscriptionsColumns[3]},
				RefColumns: []*schema.Column{TopicsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "subscriptions_users_subscriptions",
				Columns:    []*schema.Column{SubscriptionsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "subscription_user_id_topic_id",
				Unique:  true,
				Columns: []*schema.Column{SubscriptionsColumns[4], SubscriptionsColumns[3]},
			},
		},
	}
	// TopicsColumns holds the columns for the "topics" table.
	TopicsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "state", Type: field.TypeString},
		{Name: "state_at", Type: field.TypeTime},
		{Name: "sequence", Type: field.TypeInt, Default: 0},
		{Name: "touched", Type: field.TypeTime},
		{Name: "access", Type: field.TypeJSON, Nullable: true},
		{Name: "public", Type: field.TypeJSON, Nullable: true},
		{Name: "trusted", Type: field.TypeJSON, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
	}
	// TopicsTable holds the schema information for the "topics" table.
	TopicsTable = &schema.Table{
		Name:       "topics",
		Columns:    TopicsColumns,
		PrimaryKey: []*schema.Column{TopicsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "state", Type: field.TypeString},
		{Name: "state_at", Type: field.TypeTime},
		{Name: "last_seen", Type: field.TypeTime, Nullable: true},
		{Name: "access", Type: field.TypeJSON, Nullable: true},
		{Name: "public", Type: field.TypeJSON, Nullable: true},
		{Name: "trusted", Type: field.TypeJSON, Nullable: true},
		{Name: "tags", Type: field.TypeJSON, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserTopicsColumns holds the columns for the "user_topics" table.
	UserTopicsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "topic_id", Type: field.TypeUUID},
	}
	// UserTopicsTable holds the schema information for the "user_topics" table.
	UserTopicsTable = &schema.Table{
		Name:       "user_topics",
		Columns:    UserTopicsColumns,
		PrimaryKey: []*schema.Column{UserTopicsColumns[0], UserTopicsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_topics_user_id",
				Columns:    []*schema.Column{UserTopicsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_topics_topic_id",
				Columns:    []*schema.Column{UserTopicsColumns[1]},
				RefColumns: []*schema.Column{TopicsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DevicesTable,
		MessagesTable,
		SubscriptionsTable,
		TopicsTable,
		UsersTable,
		UserTopicsTable,
	}
)

func init() {
	DevicesTable.ForeignKeys[0].RefTable = UsersTable
	MessagesTable.ForeignKeys[0].RefTable = TopicsTable
	MessagesTable.ForeignKeys[1].RefTable = UsersTable
	SubscriptionsTable.ForeignKeys[0].RefTable = TopicsTable
	SubscriptionsTable.ForeignKeys[1].RefTable = UsersTable
	UserTopicsTable.ForeignKeys[0].RefTable = UsersTable
	UserTopicsTable.ForeignKeys[1].RefTable = TopicsTable
}
