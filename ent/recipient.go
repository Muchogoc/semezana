// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Muchogoc/semezana/ent/message"
	"github.com/Muchogoc/semezana/ent/recipient"
	"github.com/Muchogoc/semezana/ent/user"
	"github.com/google/uuid"
)

// Recipient is the model entity for the Recipient schema.
type Recipient struct {
	config `json:"-"`
	// MessageID holds the value of the "message_id" field.
	MessageID uuid.UUID `json:"message_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Status holds the value of the "status" field.
	Status recipient.Status `json:"status,omitempty"`
	// DeliveredAt holds the value of the "delivered_at" field.
	DeliveredAt *time.Time `json:"delivered_at,omitempty"`
	// ReadAt holds the value of the "read_at" field.
	ReadAt *time.Time `json:"read_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecipientQuery when eager-loading is set.
	Edges RecipientEdges `json:"edges"`
}

// RecipientEdges holds the relations/edges for other nodes in the graph.
type RecipientEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Message holds the value of the message edge.
	Message *Message `json:"message,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecipientEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecipientEdges) MessageOrErr() (*Message, error) {
	if e.loadedTypes[1] {
		if e.Message == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: message.Label}
		}
		return e.Message, nil
	}
	return nil, &NotLoadedError{edge: "message"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Recipient) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case recipient.FieldStatus:
			values[i] = new(sql.NullString)
		case recipient.FieldDeliveredAt, recipient.FieldReadAt:
			values[i] = new(sql.NullTime)
		case recipient.FieldMessageID, recipient.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Recipient", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Recipient fields.
func (r *Recipient) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recipient.FieldMessageID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field message_id", values[i])
			} else if value != nil {
				r.MessageID = *value
			}
		case recipient.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				r.UserID = *value
			}
		case recipient.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = recipient.Status(value.String)
			}
		case recipient.FieldDeliveredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delivered_at", values[i])
			} else if value.Valid {
				r.DeliveredAt = new(time.Time)
				*r.DeliveredAt = value.Time
			}
		case recipient.FieldReadAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field read_at", values[i])
			} else if value.Valid {
				r.ReadAt = new(time.Time)
				*r.ReadAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Recipient entity.
func (r *Recipient) QueryUser() *UserQuery {
	return (&RecipientClient{config: r.config}).QueryUser(r)
}

// QueryMessage queries the "message" edge of the Recipient entity.
func (r *Recipient) QueryMessage() *MessageQuery {
	return (&RecipientClient{config: r.config}).QueryMessage(r)
}

// Update returns a builder for updating this Recipient.
// Note that you need to call Recipient.Unwrap() before calling this method if this Recipient
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Recipient) Update() *RecipientUpdateOne {
	return (&RecipientClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Recipient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Recipient) Unwrap() *Recipient {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Recipient is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Recipient) String() string {
	var builder strings.Builder
	builder.WriteString("Recipient(")
	builder.WriteString("message_id=")
	builder.WriteString(fmt.Sprintf("%v", r.MessageID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", ")
	if v := r.DeliveredAt; v != nil {
		builder.WriteString("delivered_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := r.ReadAt; v != nil {
		builder.WriteString("read_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Recipients is a parsable slice of Recipient.
type Recipients []*Recipient

func (r Recipients) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
